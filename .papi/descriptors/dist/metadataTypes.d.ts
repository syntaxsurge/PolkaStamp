declare const content =
  ''
export default content
